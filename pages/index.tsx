import type { NextPage } from 'next';
import Head from 'next/head';
import {
    Hero,
    PageWrapper,
    Navigation,
    Sidebar,
    ScrolledNavigation,
    CategoryCard,
    PageSplitter,
    Card,
    ContentSplitter,
    ImageSlider,
    Footer,
} from 'components';
import Shopify, { RequestReturn } from '@shopify/shopify-api';

export interface PRODUCT {
    data: Data;
}
export interface Data {
    products: Products;
}
export interface Products {
    edges?: EdgesEntity[];
}
export interface EdgesEntity {
    node: Node;
}
export interface Node {
    id: string;
    title: string;
    images: Images;
    priceRange: PriceRange;
}
export interface Images {
    nodes?: NodesEntity[];
}
export interface NodesEntity {
    url: string;
    height: number;
    width: number;
    altText?: null;
    id: string;
}
export interface PriceRange {
    maxVariantPrice: MaxVariantPrice;
}
export interface MaxVariantPrice {
    amount: string;
    currencyCode: string;
}

// // // Load the access token as per instructions above
// const storefrontAccessToken = 'd2f2a6faf86c55e8e53fa6d10dc0f12c';
// // // Shop from which we're fetching data
// const shop = 'dkdevtechstore.myshopify.com';

// // // StorefrontClient takes in the shop url and the Storefront Access Token for that shop.
// const storefrontClient = new Shopify.Clients.Storefront(shop, storefrontAccessToken);

const Home: NextPage<Data> = ({ products }) => {
    return (
        <PageWrapper>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Sidebar />
            <ScrolledNavigation />
            <Navigation />
            <main className="max-w-screen-2xl w-full defaultPageContentOnGrid overflow-hidden">
                <Hero />
                <PageSplitter h2Content="Best Seller" pContent="Phasellus faucibus non libero" />
                <ContentSplitter className="contentSplitter8">
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                </ContentSplitter>
                <PageSplitter h2Content="Best Seller" pContent="Phasellus faucibus non libero" />
                <ContentSplitter className="contentSplitter3">
                    <CategoryCard
                        href="#"
                        imageWrapperClasses="categoryCardProduct"
                        headerPositionClasses="bottom-5 w-full"
                    />
                    <CategoryCard
                        href="#"
                        imageWrapperClasses="categoryCardProduct"
                        headerPositionClasses="bottom-5 w-full"
                    />
                    <CategoryCard
                        href="#"
                        imageWrapperClasses="categoryCardProduct"
                        headerPositionClasses="bottom-5 w-full"
                    />
                </ContentSplitter>
                <>{console.log(products)}</>
                <PageSplitter h2Content="Best Seller" pContent="Phasellus faucibus non libero" />
                <ContentSplitter className="contentSplitter3">
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                    <Card className="" href="#" h2Content="Crew neck sweater" pContent="50" />
                </ContentSplitter>
                <PageSplitter h2Content="Best Seller" pContent="Phasellus faucibus non libero" />
                <ContentSplitter className="grid grid-rows-5 md:grid-cols-8 md:grid-rows-2 overflow-hidden">
                    <CategoryCard
                        href="#"
                        className="row-start-1 row-end-2 md:col-start-1 md:col-span-4 md:row-span-2"
                        imageWrapperClasses="aspect16_9"
                        objectPosition="top"
                        headerPositionClasses="bottom-3 w-full"
                    />
                    <CategoryCard
                        href="#"
                        className="row-start-2 row-end-4 py-4 md:py-0 md:col-start-5 md:col-span-2 md:row-start-1 md:row-end-3"
                        imageWrapperClasses="h-full"
                        headerPositionClasses="bottom-3 w-full"
                    />
                    <CategoryCard
                        href="#"
                        className="row-start-4 row-end-6 md:col-start-7 md:col-span-2 md:row-start-1 md:row-end-3"
                        imageWrapperClasses="h-full"
                        headerPositionClasses="bottom-3 w-full"
                    />
                </ContentSplitter>
                <PageSplitter h2Content="Best Seller" pContent="Phasellus faucibus non libero" />
                <ImageSlider buttonOnMobile />
            </main>
            <footer className="max-w-screen-2xl w-full defaultPageContentOnGrid pt-10">
                <Footer />
            </footer>
        </PageWrapper>
    );
};

export default Home;

export async function getStaticProps() {
    // Use client.query and pass your query as `data`
    // const {
    //     body: {
    //         data: { products },
    //     },
    // }: RequestReturn<PRODUCT> = await storefrontClient.query({
    //     data: `query Home {
    //         products(first: 6) {
    //       edges {
    //         node {
    //           id
    //           title
    //           images(first:1){
    //             nodes{
    //               url
    //               height
    //               width
    //               altText
    //               id
    //             }
    //           }
    //           priceRange {
    //             maxVariantPrice {
    //               amount
    //               currencyCode
    //             }
    //           }
    //         }
    //       }
    //     }
    //   }`,
    // });

    return {
        props: { products: {} },
    };
}
// export async function getStaticProps() {
//     const article = await client.fetch(`*[_type == "article"]`);
//     console.log(article, 'data');
//     return {
//         props: { article },
//     };
// }
