import type { NextPage, GetStaticPropsContext } from 'next';
import Head from 'next/head';
import {
    PageWrapper,
    Page,
    ImageWrapped,
    Header,
    Button,
    ItemWasAddedToBasket,
    ClockSVG,
    CheckSVG,
    HouseSVG,
} from 'components';
import Image from 'next/image';
import { PAGEID } from 'Types/PagepathsHome';
import { PRODUCT_DETAIL, Node } from 'Types/ProductDetail';
import { storefrontClient } from '../../ShopifyClient';
import type { RequestReturn } from '@shopify/shopify-api';
import useStore from 'Mobx/context/storeContext';
import Link from 'next/link';

const Product: NextPage<{ products: Node }> = ({ products }) => {
    const { basketStore } = useStore();
    return (
        <PageWrapper>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Page>
                <ItemWasAddedToBasket />
                <div className="md:flex">
                    <div className="grid gap-y-5 w-full">
                        <Header
                            className="md:hidden"
                            h2Content={products.title}
                            pContent={`$${products.priceRange.maxVariantPrice.amount}`}
                            h2Style="title"
                            pStyle="description"
                        />
                        <div className="overflow-hidden">
                            <ImageWrapped className="relative aspect1_1 transformDefault cursor-pointer hover:scale-105">
                                <Image
                                    src={products.featuredImage.url}
                                    alt={products.featuredImage.altText}
                                    layout="fill"
                                    objectFit="cover"
                                    objectPosition="center"
                                    priority={true}
                                />
                            </ImageWrapped>
                        </div>
                        <p className="text-[4vw] xs:text-[0.9rem] leading-tight">{products.description}</p>
                    </div>
                    <div className="grid md:flex md:flex-col gap-y-3 pt-10 md:p-5 w-full">
                        <Header
                            className="hidden md:block"
                            h2Content={products.title}
                            pContent={`$${products.priceRange.maxVariantPrice.amount}`}
                            h2Style="title"
                            pStyle="text-[5vw] xs:text-[1.3rem] leading-tight"
                        />
                        <div className="mt-auto w-full grid gap-y-4">
                            <Button
                                onClick={() => basketStore.pushProductToBasket(products)}
                                className="bg-pageBlack h-fit text-pageWhite w-full py-3 text-center transformDefault hover:bg-cartBtnHover"
                            >
                                ADD TO CART
                            </Button>
                            <Link href="/basket">
                                <a>
                                    <Button className="checkoutButton">GO TO BASKET</Button>
                                </a>
                            </Link>

                            <div className="flex gap-2">
                                <HouseSVG />
                                <p>
                                    Spent <span className="font-bold">$50.00</span> more for free shipping
                                </p>
                            </div>
                            <div className="flex gap-2">
                                <ClockSVG />
                                <p>
                                    Estimated Delivery :<br />
                                    <span className="font-bold">Monday 24 October - Sunday 30 October</span>
                                </p>
                            </div>

                            <div className="flex gap-2">
                                <figure className="flex bg-slate-200 p-1">
                                    <div>
                                        <CheckSVG />
                                    </div>
                                    <p>Free Shipping & Return</p>
                                </figure>
                                <figure className="flex bg-slate-200 p-1">
                                    <div>
                                        <CheckSVG />
                                    </div>
                                    <p>Money back guarantee</p>
                                </figure>
                                <figure className="flex bg-slate-200 p-1">
                                    <div>
                                        <CheckSVG />
                                    </div>
                                    <p>Fast & Reliable support</p>
                                </figure>
                            </div>
                        </div>
                    </div>
                </div>
            </Page>
        </PageWrapper>
    );
};

export default Product;

export async function getStaticPaths() {
    const {
        body: {
            data: {
                products: { edges },
            },
        },
    }: RequestReturn<PAGEID> = await storefrontClient.query({
        data: `query PageIds {
            products(first: 20) {
          edges {
            node {
              tags
            }
          }
        }
      }`,
    });

    const paths: {
        params: { id: string };
    }[] = edges.map(el => {
        return {
            params: { id: el.node.tags[0] },
        };
    });
    return {
        paths,
        fallback: 'blocking',
    };
}

export async function getStaticProps(ctx: GetStaticPropsContext) {
    const tags = ctx.params!.id;
    const {
        body: {
            data: { products },
        },
    }: RequestReturn<PRODUCT_DETAIL> = await storefrontClient.query({
        data: `query OneProduct {
            products(first: 1, query:"tag:${tags}") {
              edges {
                node {
                  id
                  title
                  description
                  tags
                  featuredImage {
                    altText
                    url
                    width
                    height
                  }
                  priceRange {
                    maxVariantPrice {
                      amount
                      currencyCode
                    }
                  }
                  variants(first: 1) {
                    edges {
                      node {
                        id
                      }
                    }
                  }
                }
              }
            }
          }`,
    });

    // console.log(products, 'PAGE DATA');
    return {
        props: { products: products.edges[0].node },
    };
}
