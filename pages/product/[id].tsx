import type { NextPage, GetStaticPropsContext } from 'next';
import Head from 'next/head';
import { PageWrapper, Page } from 'components';
import { PAGEID, EdgesEntity } from 'Types/PagepathsHome';
import { PRODUCT } from 'Types/Products';
import { storefrontClient } from '../../ShopifyClient';
import type { RequestReturn } from '@shopify/shopify-api';

const Product: NextPage = ({ products }) => {
    return (
        <PageWrapper>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Page></Page>
        </PageWrapper>
    );
};

export default Product;

export async function getStaticPaths() {
    const {
        body: {
            data: {
                products: { edges },
            },
        },
    }: RequestReturn<PAGEID> = await storefrontClient.query({
        data: `query PageIds {
            products(first: 20) {
          edges {
            node {
              tags
            }
          }
        }
      }`,
    });

    const paths: {
        params: { id: string };
    }[] = edges.map(el => {
        return {
            params: { id: el.node.tags[0] },
        };
    });
    return {
        paths,
        fallback: 'blocking',
    };
}

export async function getStaticProps(ctx: GetStaticPropsContext) {
    const tags = ctx.params!.id;
    const {
        body: {
            data: { products },
        },
    }: RequestReturn<PRODUCT> = await storefrontClient.query({
        data: `query OneProduct {
            products(first: 1, query:"tag:${tags}") {
              edges {
                node {
                  id
                  title
                  featuredImage {
                    altText
                    url
                    width
                    height
                  }
                  priceRange {
                    maxVariantPrice {
                      amount
                      currencyCode
                    }
                  }
                }
              }
            }
          }`,
    });

    console.log(products, 'PAGE DATA');
    return {
        props: { products },
    };
}
